name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        go-version: [1.15.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go mod download

    - name: Build
      run: go build -v .

    - name: Test
      # run: echo go test -v .
      # note that $RUNNER_OS is empty on the windows runner somehow.
      run: echo ${{ runner.os }} && ls && ./action_experiments

    - name: Set vars
      id: vars
      run: |
        echo ::set-output name=archive_ext::\
        $(echo '{ "Linux": "-linux.tgz", "macOS": "-macos.tgz", "Windows": "-win.zip", "Windows/0": "-win.zip" }' | jq -r 'to_entries[] | select(.key=="${{ runner.os }}") | .value')
        echo ::set-output name=file_ext::\
        $(echo '{ "Linux": "", "macOS": "", "Windows": ".exe", "Windows/0": ".exe" }' | jq -r 'to_entries[] | select(.key=="${{ runner.os }}") | .value')

    - name: compress
      run: |
        echo ${{ runner.os }}
        if [[ "${{ runner.os }}" == "Linux" || "${{ runner.os }}" == "macOS" ]]; then
            tar -czvf action_experiments${{ steps.vars.outputs.archive_ext }} action_experiments
        elif [[ "${{ runner.os }}" == "Windows/0" ]]; then
            zip -qq -r action_experiments${{ steps.vars.outputs.archive_ext }} action_experiments.exe
        else
            echo 'unsupported runner'
            exit 1
        fi

    - name: Publish artifact
      uses: actions/upload-artifact@v2
      with:
        name: action_experiments${{ steps.vars.outputs.archive_ext }}
        path: action_experiments${{ steps.vars.outputs.archive_ext }}
